/*=========| BASIC |=========*/

class Foo : IActivatable, ISysTickable, IButtonRechargable {
    public float cooldownPeriod, remainingCooldownTime, ...
    private float ---, ...
    private bool isActive = false;
    private UnityEngine.UI.Image outline = null;
    
    public Foo() { this.UpdateAbility(); }

    public void Activate() { //reset the timer and activate ability.
        if (isActive || remainingCooldownTime != 0) return;
        remainingCooldownTime = cooldownPeriod;
        ...
        ...
        ...
        isActive = true;
    }

    public bool GetIsActive() { return isActive; }

    public float GetCooldownPercentage() {
        return (cooldownPeriod - remainingCooldownTime) / cooldownPeriod;
    }

    public void SysTickCall() {
        if (isActive) {
            "var" = Mathf.Max(0, "var" - Time.deltaTime);
            if ("var" == 0) isActive = false;
            if (outline != null) { // Show that the ability is currently active + cooldown bar for that.
                outline.fillAmount = ...
            }
        } else {
            remainingCooldownTime = Mathf.Max(0, remainingCooldownTime - Time.deltaTime);
            if (outline != null) { // update the outline.
                outline.fillAmount = (cooldownPeriod - remainingCooldownTime) / cooldownPeriod;
            }
        }
    }

    public void SetButtonOutlineProgressImage(UnityEngine.UI.Image outlineProgress) {
        outline = outlineProgress;
    }
}